// BlueprintGeneratedClass BP_LightFixture_Master.BP_LightFixture_Master_C
// Size: 0xaec (Inherited: 0x248)
struct ABP_LightFixture_Master_C : AActor {
	struct FPointerToUberGraphFrame UberGraphFrame; // 0x248(0x08)
	struct UAnimatedLightParametersComponent* AnimatedLightParameters; // 0x250(0x08)
	struct UAkComponent* AK BP Light Fixture Master; // 0x258(0x08)
	struct USceneComponent* Lights; // 0x260(0x08)
	struct UStaticMeshComponent* Base; // 0x268(0x08)
	struct USceneComponent* DefaultSceneRoot; // 0x270(0x08)
	bool Add Anchor; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct UStaticMeshComponent* Anchor; // 0x280(0x08)
	bool Add Chain; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	float Chain Length; // 0x28c(0x04)
	float Base Offset; // 0x290(0x04)
	float Scale Factor; // 0x294(0x04)
	float Link To Link Offset; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct UStaticMeshComponent* Chain Mesh; // 0x2a0(0x08)
	bool Add Rope; // 0x2a8(0x01)
	char pad_2A9[0x7]; // 0x2a9(0x07)
	struct TArray<struct UStaticMeshComponent*> Chain Array; // 0x2b0(0x10)
	int32_t Chain Index; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct TArray<int32_t> Chain Index Array; // 0x2c8(0x10)
	struct FVector Initial Scale; // 0x2d8(0x0c)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UStaticMesh* Anchor Mesh; // 0x2e8(0x08)
	bool Add Candles; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct UStaticMeshComponent* Candle; // 0x2f8(0x08)
	struct FRandomStream Random Seed; // 0x300(0x08)
	struct TArray<struct UStaticMeshComponent*> Candle Array; // 0x308(0x10)
	float Candle Offset; // 0x318(0x04)
	struct FVector Candle Scale; // 0x31c(0x0c)
	bool Add Particles; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct UNiagaraComponent* Niagara System; // 0x330(0x08)
	bool Custom Particle; // 0x338(0x01)
	char pad_339[0x7]; // 0x339(0x07)
	struct UNiagaraSystem* Particle; // 0x340(0x08)
	struct FVector Particle Scale; // 0x348(0x0c)
	float Particle Offset; // 0x354(0x04)
	struct TArray<struct UNiagaraComponent*> Niagara System Array; // 0x358(0x10)
	struct TArray<int32_t> Niagara System Index Array; // 0x368(0x10)
	bool Has Emissive Mat; // 0x378(0x01)
	char pad_379[0x3]; // 0x379(0x03)
	struct FLinearColor Light Source - Emissive Color; // 0x37c(0x10)
	float Light Source - Emissive Multiplier; // 0x38c(0x04)
	bool Point Light On; // 0x390(0x01)
	bool Spot Light On; // 0x391(0x01)
	bool Add Lights; // 0x392(0x01)
	char pad_393[0x5]; // 0x393(0x05)
	struct UPointLightComponent* Point Light; // 0x398(0x08)
	bool Flicker; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)
	struct UAnimatedLightComponent* Anim Light; // 0x3a8(0x08)
	float Wave Speed 1; // 0x3b0(0x04)
	float Wave Speed 2; // 0x3b4(0x04)
	float Flicker Min Intensity; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct TMap<float, bool> CustomAttenuationRadius; // 0x3c0(0x50)
	float AttenuationRadius; // 0x410(0x04)
	float Intensity; // 0x414(0x04)
	struct TMap<float, bool> CustomIntensity; // 0x418(0x50)
	float Temperature; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct TMap<float, bool> CustomTemperature; // 0x470(0x50)
	float Volumetric Scattering; // 0x4c0(0x04)
	struct FLinearColor Color; // 0x4c4(0x10)
	bool Cast Shadow; // 0x4d4(0x01)
	bool Project Shadows; // 0x4d5(0x01)
	bool Static Only Shadows; // 0x4d6(0x01)
	char pad_4D7[0x1]; // 0x4d7(0x01)
	float Shadow Bias; // 0x4d8(0x04)
	float Contact Shadow Length; // 0x4dc(0x04)
	float Indirect Intensity; // 0x4e0(0x04)
	struct FVector Point Light Offset; // 0x4e4(0x0c)
	struct USpotLightComponent* Spot Light; // 0x4f0(0x08)
	struct FRotator Rotation SL; // 0x4f8(0x0c)
	struct FVector Spot Light Offset; // 0x504(0x0c)
	struct TMap<float, bool> CustomAttenuationRadius SL; // 0x510(0x50)
	float AttenuationRadius_SL; // 0x560(0x04)
	char pad_564[0x4]; // 0x564(0x04)
	struct TMap<float, bool> CustomIntensity SL; // 0x568(0x50)
	float Intensity_SL; // 0x5b8(0x04)
	char pad_5BC[0x4]; // 0x5bc(0x04)
	struct TMap<float, bool> CustomTemperature SL; // 0x5c0(0x50)
	float Temperature_SL; // 0x610(0x04)
	float Volumetric Scatting SL; // 0x614(0x04)
	struct FLinearColor Color_SL; // 0x618(0x10)
	float Outer Cone Angle; // 0x628(0x04)
	float Inner Cone Angle; // 0x62c(0x04)
	bool Cast Shadows SL; // 0x630(0x01)
	bool Project Shadows SL; // 0x631(0x01)
	bool Static Only Shadows SL; // 0x632(0x01)
	char pad_633[0x1]; // 0x633(0x01)
	float Indirect Intensity SL; // 0x634(0x04)
	float ShadowBais; // 0x638(0x04)
	float Contact Shadow Length SL; // 0x63c(0x04)
	struct FVector Anchor Scale; // 0x640(0x0c)
	bool Is Outside; // 0x64c(0x01)
	bool On During Day; // 0x64d(0x01)
	bool Ambient Particles; // 0x64e(0x01)
	char pad_64F[0x1]; // 0x64f(0x01)
	struct UMaterialBillboardComponent* CandleFlame; // 0x650(0x08)
	struct TArray<struct UMaterialBillboardComponent*> CandleFlameArray; // 0x658(0x10)
	struct FRotator Rotation; // 0x668(0x0c)
	char pad_674[0x4]; // 0x674(0x04)
	struct UMaterialInstanceDynamic* Emissive Mat; // 0x678(0x08)
	float Min Distance; // 0x680(0x04)
	char pad_684[0x4]; // 0x684(0x04)
	struct TMap<float, bool> Source Radius; // 0x688(0x50)
	float Shadow Resolution Scale; // 0x6d8(0x04)
	float Shadow Clipping Distance; // 0x6dc(0x04)
	float Min Distance SL; // 0x6e0(0x04)
	float Source Radius SL; // 0x6e4(0x04)
	float Shadow Resolution Scale_SL; // 0x6e8(0x04)
	float Shadow Clipping Distane SL; // 0x6ec(0x04)
	struct TSoftObjectPtr<UStaticMesh> Chain; // 0x6f0(0x28)
	struct TSoftObjectPtr<UStaticMesh> Rope; // 0x718(0x28)
	struct FTransform Base LOC; // 0x740(0x30)
	struct ABP_FakeFog_A_C* Fake Fog; // 0x770(0x08)
	char pad_778[0x8]; // 0x778(0x08)
	struct FTransform Spot LOC; // 0x780(0x30)
	struct UTexture* PointLightTexture; // 0x7b0(0x08)
	struct UDayNightBasicLightControllerComponent* Day Night Adjuster; // 0x7b8(0x08)
	bool Run Construction; // 0x7c0(0x01)
	bool Enable DayNight Modulator; // 0x7c1(0x01)
	char pad_7C2[0x2]; // 0x7c2(0x02)
	struct FVector2D Max; // 0x7c4(0x08)
	struct FLinearColor Night Color Mod; // 0x7cc(0x10)
	float Day Intensity Factor; // 0x7dc(0x04)
	float Light Texture Intensity PL; // 0x7e0(0x04)
	char pad_7E4[0x4]; // 0x7e4(0x04)
	struct TArray<struct FWCullingPlane> CullingPlanes; // 0x7e8(0x10)
	enum class E_LightFixture_Default Light Type; // 0x7f8(0x01)
	char pad_7F9[0x7]; // 0x7f9(0x07)
	struct TArray<struct FName> LightTypeInputNames; // 0x800(0x10)
	struct UTexture* SL_Light Texture; // 0x810(0x08)
	float Light Texture Intensity SL; // 0x818(0x04)
	char pad_81C[0x4]; // 0x81c(0x04)
	struct TArray<struct FWCullingPlane> Light Culling Planes_SL; // 0x820(0x10)
	bool Add Color Flicker; // 0x830(0x01)
	char pad_831[0x3]; // 0x831(0x03)
	float Saturtation Noise Amount; // 0x834(0x04)
	float Saturation Noise Speed; // 0x838(0x04)
	float Hue Noise Amount; // 0x83c(0x04)
	float Hue Noise Speed; // 0x840(0x04)
	char pad_844[0x4]; // 0x844(0x04)
	struct UMaterialInterface* Lamp Material_PPM; // 0x848(0x08)
	struct TMap<struct UMaterialInterface*, int32_t> Shade Mats; // 0x850(0x50)
	struct UPhoenixPhysicalMaterial* Glass Material; // 0x8a0(0x08)
	struct UPhoenixPhysicalMaterial* Cloth Material; // 0x8a8(0x08)
	float Shade - Emissive Multiplier; // 0x8b0(0x04)
	float Emissive Day Mod; // 0x8b4(0x04)
	bool Has Sound; // 0x8b8(0x01)
	char pad_8B9[0x3]; // 0x8b9(0x03)
	struct FVector Sound Offset; // 0x8bc(0x0c)
	enum class EDayNightEventDirection RiseSet; // 0x8c8(0x01)
	char pad_8C9[0x3]; // 0x8c9(0x03)
	struct FName Light Tag; // 0x8cc(0x08)
	char pad_8D4[0x4]; // 0x8d4(0x04)
	struct ALightClippingPlanes* Light Clipping Planes Actor; // 0x8d8(0x08)
	bool Invert Clipping Planes; // 0x8e0(0x01)
	enum class ELightCullingPriority Point Light Shadow Priority; // 0x8e1(0x01)
	enum class ELightCullingPriority Spot Light Shadow Priority; // 0x8e2(0x01)
	char pad_8E3[0x5]; // 0x8e3(0x05)
	struct ALightClippingVolume* Light Clipping Volume Actor; // 0x8e8(0x08)
	enum class ELightClippingProviderVolumeMode Volume Mode; // 0x8f0(0x01)
	char pad_8F1[0x3]; // 0x8f1(0x03)
	float Max Draw Distance; // 0x8f4(0x04)
	float Max Fade Distance; // 0x8f8(0x04)
	bool Swinging; // 0x8fc(0x01)
	char pad_8FD[0x3]; // 0x8fd(0x03)
	struct FVector Cable End Adjustment; // 0x900(0x0c)
	float Cable Width; // 0x90c(0x04)
	float Tile Material; // 0x910(0x04)
	char pad_914[0x4]; // 0x914(0x04)
	struct UMaterialInterface* Material; // 0x918(0x08)
	struct USceneComponent* Cables; // 0x920(0x08)
	float Cable Length; // 0x928(0x04)
	char pad_92C[0x4]; // 0x92c(0x04)
	struct UPhysicsConstraintComponent* Physics Constraint; // 0x930(0x08)
	float Base Mass; // 0x938(0x04)
	float Angular Dampening; // 0x93c(0x04)
	float Linear Dampening; // 0x940(0x04)
	enum class EComponentMobility Mobility; // 0x944(0x01)
	char pad_945[0x3]; // 0x945(0x03)
	struct UNiagaraComponent* Ambient Particle 2; // 0x948(0x08)
	enum class EShadowQualityLevels Shadow Quality Level; // 0x950(0x01)
	enum class EShadowQualityLevels Shadow Quality Level SL; // 0x951(0x01)
	char pad_952[0x6]; // 0x952(0x06)
	struct TArray<struct TSoftObjectPtr<UStaticMesh>> FatCandles; // 0x958(0x10)
	struct TArray<struct TSoftObjectPtr<UStaticMesh>> SkinnyCandles; // 0x968(0x10)
	bool UseSkinny; // 0x978(0x01)
	char pad_979[0x7]; // 0x979(0x07)
	struct TMap<struct UAkAudioEvent*, float> AK Map; // 0x980(0x50)
	bool Candles_CastShadows; // 0x9d0(0x01)
	char pad_9D1[0x3]; // 0x9d1(0x03)
	struct FVector Sound LOC; // 0x9d4(0x0c)
	float Light Source-Emissive _ Local; // 0x9e0(0x04)
	float Shade - Emissive Local; // 0x9e4(0x04)
	struct UMaterialInstanceDynamic* Emissive Source; // 0x9e8(0x08)
	struct UMaterialInstanceDynamic* Emissive Shade; // 0x9f0(0x08)
	enum class ELightCullingPriority Light Priority PL; // 0x9f8(0x01)
	enum class ELightCullingPriority Light Priority SL; // 0x9f9(0x01)
	char pad_9FA[0x6]; // 0x9fa(0x06)
	struct UDayNightLocalLightControllerComponent* DayNightController; // 0xa00(0x08)
	bool Test; // 0xa08(0x01)
	char pad_A09[0x7]; // 0xa09(0x07)
	struct TArray<struct TSoftClassPtr<UObject>> DressingAssets; // 0xa10(0x10)
	int32_t Dressing  -  NOOO; // 0xa20(0x04)
	bool Add Dressing; // 0xa24(0x01)
	enum class E_RusticLamppostDressing DressingType; // 0xa25(0x01)
	char pad_A26[0xa]; // 0xa26(0x0a)
	struct FTransform Dressing Custom Transform; // 0xa30(0x30)
	struct UNiagaraSystem* Ambient Particle; // 0xa60(0x08)
	bool Split Emissives; // 0xa68(0x01)
	char pad_A69[0x7]; // 0xa69(0x07)
	struct TMap<struct UMaterialInterface*, int32_t> LampEmissivesForSplit; // 0xa70(0x50)
	struct FLinearColor Light Shade - Emissive Color; // 0xac0(0x10)
	float Candle Flame Emissive Strength; // 0xad0(0x04)
	bool DestroyRoot; // 0xad4(0x01)
	bool CustomLOC; // 0xad5(0x01)
	bool Condition; // 0xad6(0x01)
	bool Override Values; // 0xad7(0x01)
	float Attunation Threshold; // 0xad8(0x04)
	float Attenuation Threshold SL; // 0xadc(0x04)
	float Large Attenuation Radius; // 0xae0(0x04)
	float Small Attenuation Radius; // 0xae4(0x04)
	bool Convert To Simple Light; // 0xae8(0x01)
	bool Custom Shadow Distance; // 0xae9(0x01)
	bool NewVar_1; // 0xaea(0x01)
	bool InBeginPlay; // 0xaeb(0x01)

	void Set Emissive(bool LightIsOn); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Set Emissive // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void DumpLights(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.DumpLights // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Shadow Draw Distance(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Shadow Draw Distance // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void SimpleLight Struct(struct ULightComponent* Light); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.SimpleLight Struct // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void RT Specific(struct UPointLightComponent* Light, float Attenuation Threshold); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.RT Specific // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void ExtDressing(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.ExtDressing // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void On During Day Test(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.On During Day Test // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void SoundLOC(struct FVector& SoundLOC); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.SoundLOC // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x38a7480
	void Mobility Check(enum class EComponentMobility Mobility); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Mobility Check // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Get Parent(struct UMaterialInterface* MI, struct UMaterial*& Parent); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Get Parent // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x38a7480
	void Custom Values(struct TMap<float, bool>& TargetMap, float Physical Default, float& Result); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Custom Values // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x38a7480
	void Set Light Values(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Set Light Values // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Run Construction_Struct(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Run Construction_Struct // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Enable Flicker(bool Enable Flicker); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Enable Flicker // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Chain Struct(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Chain Struct // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Candle Struct(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Candle Struct // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Particle Struct(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Particle Struct // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Emissive Material Struct(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Emissive Material Struct // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Light Struct(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Light Struct // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void UserConstructionScript(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.UserConstructionScript // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void OnAffectedBySpell(struct ASpellTool* SpellTool, struct AActor* Instigator, struct TArray<struct UInteractionArchitectAsset*>& DataAssets, struct USpellToolRecord* SpellToolRecord, struct FName SpellType, struct FGameplayTagContainer Impact, struct FHitResult& Hit, struct FVector& ImpactDirection); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnAffectedBySpell // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x38a7480
	void OnAffectedBySpellEnd(struct ASpellTool* SpellTool, struct AActor* Instigator, struct USpellToolRecord* SpellToolRecord, struct FName SpellType, struct FGameplayTagContainer Impact); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnAffectedBySpellEnd // (Event|Public|BlueprintEvent) // @ game+0x38a7480
	void OnOverlappedBySpell(struct ASpellTool* SpellTool, struct AActor* Instigator, struct USpellToolRecord* SpellToolRecord, struct FName SpellType, struct FGameplayTagContainer Impact, struct FVector& MunitionLocation); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnOverlappedBySpell // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x38a7480
	void OnSpellEffective(struct AActor* Instigator); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnSpellEffective // (Event|Public|BlueprintEvent) // @ game+0x38a7480
	void OnSpellIneffective(struct AActor* Instigator); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnSpellIneffective // (Event|Public|BlueprintEvent) // @ game+0x38a7480
	void OnSpellTooWeak(struct AActor* Instigator); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnSpellTooWeak // (Event|Public|BlueprintEvent) // @ game+0x38a7480
	void DayNightMoonEvent(struct UDayNightMasterComponent* DayNightMaster, struct FName EventName, struct FSolarNormalizedTime NormalizedTime, struct FDateTime GameTime, enum class EDayNightEventDirection MoonDirection, float MoonAltitudeDegrees, enum class EMoonPhaseName Phase, bool bLate); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.DayNightMoonEvent // (Event|Public|BlueprintEvent) // @ game+0x38a7480
	void ReceiveBeginPlay(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // @ game+0x38a7480
	void OnEnterLightTickRange(struct ULightComponent* LightComponent); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnEnterLightTickRange // (Event|Public|BlueprintEvent) // @ game+0x38a7480
	void OnExitLightTickRange(struct ULightComponent* LightComponent); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnExitLightTickRange // (Event|Public|BlueprintEvent) // @ game+0x38a7480
	void DayNightSunEvent(struct UDayNightMasterComponent* DayNightMaster, struct FName EventName, struct FSolarNormalizedTime NormalizedTime, struct FDateTime GameTime, enum class EDayNightEventDirection SunDirection, float SunAltitudeDegrees, bool bLate); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.DayNightSunEvent // (Event|Public|BlueprintEvent) // @ game+0x38a7480
	void Show All(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Show All // (BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Hide(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Hide // (BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void DayNightLightSwitch(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.DayNightLightSwitch // (BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void DayNightParticalSwitch(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.DayNightParticalSwitch // (BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Post AK(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Post AK // (BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Stop AK(); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.Stop AK // (BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void OnHitBySpell(struct ASpellTool* SpellTool, struct AActor* Instigator, struct USpellToolRecord* SpellToolRecord, struct FName SpellType, struct FHitResult& Hit, struct FVector& ImpactDirection); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.OnHitBySpell // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x38a7480
	void ExecuteUbergraph_BP_LightFixture_Master(int32_t EntryPoint); // Function BP_LightFixture_Master.BP_LightFixture_Master_C.ExecuteUbergraph_BP_LightFixture_Master // (Final|UbergraphFunction|HasDefaults) // @ game+0x38a7480
};

