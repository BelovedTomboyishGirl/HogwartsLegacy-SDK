// BlueprintGeneratedClass BP_HW_LightFixture_Table_Themed.BP_HW_LightFixture_Table_Themed_C
// Size: 0x358 (Inherited: 0x248)
struct ABP_HW_LightFixture_Table_Themed_C : AActor {
	struct UStaticMeshComponent* Base; // 0x248(0x08)
	struct USceneComponent* DefaultSceneRoot; // 0x250(0x08)
	enum class E_Sanc_Lighttype Light Type; // 0x258(0x01)
	bool Point Light ON?; // 0x259(0x01)
	char pad_25A[0x2]; // 0x25a(0x02)
	float Intensity; // 0x25c(0x04)
	struct FLinearColor Color; // 0x260(0x10)
	float AttenuationRadius; // 0x270(0x04)
	float Source Radius; // 0x274(0x04)
	float Source Length; // 0x278(0x04)
	float Temperature; // 0x27c(0x04)
	bool Cast Shadows; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float Indirect Lighting Intensity; // 0x284(0x04)
	float Volumetric Scattering Intensity; // 0x288(0x04)
	enum class E_Sanc_LightSize Light size; // 0x28c(0x01)
	enum class E_Sanc_Theme Theme; // 0x28d(0x01)
	char pad_28E[0x2]; // 0x28e(0x02)
	int32_t Theme Datatable Index; // 0x290(0x04)
	bool Override Light Parameters; // 0x294(0x01)
	bool Re-initialiseOverrideValues; // 0x295(0x01)
	char pad_296[0x2]; // 0x296(0x02)
	struct UStaticMesh* Light fixture; // 0x298(0x08)
	float Max Draw Distance; // 0x2a0(0x04)
	bool Spot Light ON?; // 0x2a4(0x01)
	bool Use Raytraced Distance fields; // 0x2a5(0x01)
	bool Take same light color; // 0x2a6(0x01)
	char pad_2A7[0x1]; // 0x2a7(0x01)
	float Intensity_SL; // 0x2a8(0x04)
	struct FLinearColor Color_SL; // 0x2ac(0x10)
	float AttenuationRadius_SL; // 0x2bc(0x04)
	float Spotlight Cone Angle; // 0x2c0(0x04)
	bool Use temperature SL; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	float Temperature_SL; // 0x2c8(0x04)
	bool Cast Shadows? SL; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	float Indirect Lighting Intensity_SL; // 0x2d0(0x04)
	float Volumetric Scattering Intensity__SL; // 0x2d4(0x04)
	float ShadowBais; // 0x2d8(0x04)
	float Set Shadow Bias; // 0x2dc(0x04)
	float Chain Length; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UMaterialInterface* Light Function Material; // 0x2e8(0x08)
	struct UPointLightComponent* Point Light; // 0x2f0(0x08)
	struct USpotLightComponent* Spot Light; // 0x2f8(0x08)
	struct UTextureLightProfile* IES Textures; // 0x300(0x08)
	float Static mesh scale multiplier; // 0x308(0x04)
	struct FVector Start location; // 0x30c(0x0c)
	struct UMaterialInterface* SL_Light_Function; // 0x318(0x08)
	struct UTextureLightProfile* SL_IES_Texture; // 0x320(0x08)
	struct FVector Offset Point; // 0x328(0x0c)
	struct FVector Offset Spot; // 0x334(0x0c)
	struct FRotator Rotation_SL; // 0x340(0x0c)
	struct FRotator Rotation; // 0x34c(0x0c)

	void Spotlight with distance fields(bool Use Raytraced Distance fields, struct USpotLightComponent*& SpotLight); // Function BP_HW_LightFixture_Table_Themed.BP_HW_LightFixture_Table_Themed_C.Spotlight with distance fields // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Set theme(enum class E_Sanc_Theme Theme); // Function BP_HW_LightFixture_Table_Themed.BP_HW_LightFixture_Table_Themed_C.Set theme // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Override Parameters(struct ULocalLightComponent* Object); // Function BP_HW_LightFixture_Table_Themed.BP_HW_LightFixture_Table_Themed_C.Override Parameters // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Set Light Values(float Intensity, struct FLinearColor Light Color, float Attenuation Radius, bool Use Temperature, float Kelvin Temperature, float Indirect Intensity, bool CastDynamicShadow, struct UMaterialInterface* Light Function, struct UTextureLightProfile* IES Texture, struct ULightComponent* Light, struct ULightComponent*& LightComponent); // Function BP_HW_LightFixture_Table_Themed.BP_HW_LightFixture_Table_Themed_C.Set Light Values // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
};

