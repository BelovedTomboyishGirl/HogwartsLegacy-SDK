// BlueprintGeneratedClass BP_HM_Spline_Parent.BP_HM_Spline_Parent_C
// Size: 0x484 (Inherited: 0x248)
struct ABP_HM_Spline_Parent_C : AActor {
	struct FPointerToUberGraphFrame UberGraphFrame; // 0x248(0x08)
	struct USplineComponent* Spline; // 0x250(0x08)
	struct UBP_SplineToolGenerator_C* BP_SplineToolGenerator; // 0x258(0x08)
	struct UBP_SplineCollisionGenerator_C* BP_SplineCollisionGenerator; // 0x260(0x08)
	bool UseHISMToolComponent; // 0x268(0x01)
	char pad_269[0x3]; // 0x269(0x03)
	float Section Length; // 0x26c(0x04)
	struct USplineMeshComponent* Spline Mesh; // 0x270(0x08)
	int32_t Last Index; // 0x278(0x04)
	float Normalize; // 0x27c(0x04)
	int32_t Mesh Select; // 0x280(0x04)
	bool Random Mesh; // 0x284(0x01)
	char pad_285[0x3]; // 0x285(0x03)
	struct FRandomStream Random Seed; // 0x288(0x08)
	struct TArray<struct TSoftObjectPtr<UStaticMesh>> Meshes; // 0x290(0x10)
	struct TArray<int32_t> Location Array; // 0x2a0(0x10)
	bool snap; // 0x2b0(0x01)
	enum class ESplinePointType Spline Type; // 0x2b1(0x01)
	bool Closed Spline; // 0x2b2(0x01)
	enum class ESplineMeshAxis Forward Axis; // 0x2b3(0x01)
	bool Tag Visibility; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	struct UStaticMeshComponent* Start SM; // 0x2b8(0x08)
	bool StartAndEndMesh; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct UStaticMesh* Start Mesh; // 0x2c8(0x08)
	struct UStaticMeshComponent* End SM; // 0x2d0(0x08)
	struct UStaticMesh* End Mesh; // 0x2d8(0x08)
	bool LimitStretch; // 0x2e0(0x01)
	char pad_2E1[0x3]; // 0x2e1(0x03)
	struct FVector EndMeshROTAdjustment; // 0x2e4(0x0c)
	float SectionOffset; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct TMap<struct USplineMeshComponent*, int32_t> Spline Mesh Array; // 0x2f8(0x50)
	bool AlternateSplineMeshes; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	float Spline Length; // 0x34c(0x04)
	bool Reorder Meshes; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	struct TArray<int32_t> Set To A; // 0x358(0x10)
	struct TArray<int32_t> Set To B; // 0x368(0x10)
	struct TArray<int32_t> Set To C; // 0x378(0x10)
	struct TArray<int32_t> Set To D; // 0x388(0x10)
	bool Cast Shadows; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float CheckDistance; // 0x39c(0x04)
	float AngleThreshold; // 0x3a0(0x04)
	float BoxHeight; // 0x3a4(0x04)
	float BoxWidth; // 0x3a8(0x04)
	bool UsePitch; // 0x3ac(0x01)
	char pad_3AD[0x3]; // 0x3ad(0x03)
	struct FText Report; // 0x3b0(0x18)
	struct UPhysicalMaterial* PhysicsMaterial; // 0x3c8(0x08)
	bool GenerateOverlapEvents; // 0x3d0(0x01)
	bool UseBaseCollisionProfile; // 0x3d1(0x01)
	char pad_3D2[0x2]; // 0x3d2(0x02)
	struct FName BaseCollisionProfileName; // 0x3d4(0x08)
	enum class ECollisionEnabled CollisionEnabled; // 0x3dc(0x01)
	enum class ECollisionChannel ObjectType; // 0x3dd(0x01)
	char pad_3DE[0x2]; // 0x3de(0x02)
	struct TMap<enum class ECollisionChannel, enum class ECollisionResponse> TraceResponsesOverrides; // 0x3e0(0x50)
	bool CreateBoxCollisions; // 0x430(0x01)
	char pad_431[0x7]; // 0x431(0x07)
	struct UHierarchicalInstancedStaticMeshComponent* CollisionHISM; // 0x438(0x08)
	bool RotateMeshAtOrigin; // 0x440(0x01)
	bool Flip Mesh; // 0x441(0x01)
	char pad_442[0x2]; // 0x442(0x02)
	struct FLinearColor Wall Color; // 0x444(0x10)
	bool Use Spline Mesh by Max Angle; // 0x454(0x01)
	char pad_455[0x3]; // 0x455(0x03)
	float Max Angle Delta; // 0x458(0x04)
	float Spacing Offset; // 0x45c(0x04)
	struct FName In Collision Profile Name; // 0x460(0x08)
	bool Enable Debugging; // 0x468(0x01)
	char pad_469[0x3]; // 0x469(0x03)
	int32_t Debug ISM Components Count; // 0x46c(0x04)
	int32_t Debug Spline Mesh Components Count; // 0x470(0x04)
	int32_t Debug ISM Instances Count; // 0x474(0x04)
	float Start Mesh Offset; // 0x478(0x04)
	float End Mesh Offset; // 0x47c(0x04)
	int32_t Use HISMThreshold; // 0x480(0x04)

	void Request Destroy Spline Helper(struct USplineComponent* SplineHelper, bool& Success); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.Request Destroy Spline Helper // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void RequestDestroyComponent(struct UInstancedStaticMeshComponent* ISM Component, bool& Success); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.RequestDestroyComponent // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void GetFoliageActors(struct TArray<struct AInstancedFoliageActor*>& OutActors); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.GetFoliageActors // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x38a7480
	void GetStaticMeshesUsedOnSpline(struct TArray<struct UStaticMesh*>& UsedMeshes, struct TArray<float>& MeshChance); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.GetStaticMeshesUsedOnSpline // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x38a7480
	void ReOrderSplineMeshes(); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.ReOrderSplineMeshes // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void AlternateMeshes(); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.AlternateMeshes // (Public|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Spline Constructor(); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.Spline Constructor // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Location Tags(); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.Location Tags // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void UserConstructionScript(); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.UserConstructionScript // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void Show Location Tags(); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.Show Location Tags // (BlueprintCallable|BlueprintEvent) // @ game+0x38a7480
	void ExecuteUbergraph_BP_HM_Spline_Parent(int32_t EntryPoint); // Function BP_HM_Spline_Parent.BP_HM_Spline_Parent_C.ExecuteUbergraph_BP_HM_Spline_Parent // (Final|UbergraphFunction) // @ game+0x38a7480
};

